openapi: 3.0.1
info:
  title: Inventory Management System
  version: v0
servers:
- url: http://localhost:8080
  description: Generated server url
paths:
  /warehouses/{id}:
    get:
      tags:
      - Warehouse
      operationId: get warehouse
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WarehouseDto'
        "404":
          description: invoice not found
        
    put:
      tags:
      - Warehouse
      operationId: update warehouse
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WarehouseRequest'
        required: true
      responses:
        "200":
          description: successful update
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WarehouseDto'
        "400":
          description: request parameters are invalid
        "404":
          description: warehouse not found
    delete:
      tags:
      - Warehouse
      operationId: delete warehouse
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful deletion
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WarehouseDto'
        "400":
          description: invoice is used
    patch:
      tags:
      - Warehouse
      operationId: patch warehouse
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WarehouseRequest'
        required: true
      responses:
        "200":
          description: successful partial update
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WarehouseDto'
        "400":
          description: request parameters are invalid
        "404":
          description: warehouse not found
  /warehouse-item-details/{id}:
    get:
      tags:
      - Warehouse Item Detail
      operationId: get warehouse item detail
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WarehouseItemDetailDto'
        "404":
          description: invoice item detail not found
    put:
      tags:
      - Warehouse Item Detail
      operationId: update warehouse item detail
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WarehouseItemDetailRequest'
        required: true
      responses:
        "200":
          description: successful update
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WarehouseItemDetailDto'
        "400":
          description: request parameters are invalid
        "404":
          description: invoice item detail not found
    delete:
      tags:
      - Warehouse Item Detail
      operationId: delete warehouse item detail
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful deletion
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WarehouseItemDetailDto'
        "400":
          description: invoice item detail is used
        "404":
          description: invoice item detail not found
    patch:
      tags:
      - Warehouse Item Detail
      operationId: patch warehouse item detail
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WarehouseItemDetailRequest'
        required: true
      responses:
        "200":
          description: successful partial update
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WarehouseItemDetailDto'
        "400":
          description: request parameters are invalid
        "404":
          description: invoice item detail not found
  /units/{id}:
    get:
      tags:
      - Unit
      operationId: get unit
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UnitDto'
        "404":
          description: unit not found
    put:
      tags:
      - Unit
      operationId: update unit
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnitRequest'
        required: true
      responses:
        "200":
          description: successful
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UnitDto'
        "400":
          description: request parameters are invalid
        "404":
          description: belongsToId unit not found
    delete:
      tags:
      - Unit
      operationId: delete unit
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UnitDto'
        "400":
          description: unit is used
        "404":
          description: unit not found
    patch:
      tags:
      - Unit
      operationId: patch unit
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnitRequest'
        required: true
      responses:
        "200":
          description: successful
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UnitDto'
        "400":
          description: request parameters are invalid
        "404":
          description: belongsToId unit not found
  /items/{id}:
    get:
      tags:
      - Item
      operationId: get item
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ItemDto'
        "404":
          description: item not found
    put:
      tags:
      - Item
      operationId: update item
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemRequest'
        required: true
      responses:
        "200":
          description: successful
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ItemDto'
        "400":
          description: request parameters are invalid
        "404":
          description: baseUnitId unit not found
    delete:
      tags:
      - Item
      operationId: delete item
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ItemDto'
        "400":
          description: item is used
        "404":
          description: item not found
    patch:
      tags:
      - Item
      operationId: patch item
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemRequest'
        required: true
      responses:
        "200":
          description: successful
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ItemDto'
        "400":
          description: request parameters are invalid
        "404":
          description: baseUnitId unit not found
  /invoices/{id}:
    get:
      tags:
      - Invoice
      operationId: get invoice
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvoiceDto'
        "404":
          description: invoice not found
    put:
      tags:
      - Invoice
      operationId: update invoice
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoiceRequest'
        required: true
      responses:
        "200":
          description: successful update
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvoiceDto'
        "400":
          description: request parameters are invalid
        "404":
          description: warehouseId Warehouse not found
    delete:
      tags:
      - Invoice
      operationId: delete invoice
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful deletion
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvoiceDto'
        "400":
          description: invoice is used
        "403":
          description: invoice is not pending
    patch:
      tags:
      - Invoice
      operationId: patch invoice
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoiceRequest'
        required: true
      responses:
        "200":
          description: successful partial update
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvoiceDto'
        "400":
          description: request parameters are invalid
        "404":
          description: warehouseId Warehouse not found
  /invoices/{id}/post:
    put:
      tags:
      - Invoice
      operationId: post invoice
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: succesful posting
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvoiceDto'
        "403":
          description: invoice is not pending
  /invoices/{id}/cancel:
    put:
      tags:
      - Invoice
      operationId: cancel invoice
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvoiceDto'
  /invoice-item-details/{id}:
    get:
      tags:
      - Invoice Item Detail
      operationId: get invoice item detail
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvoiceItemDetailDto'
    put:
      tags:
      - Invoice Item Detail
      operationId: update invoice item detail
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoiceItemDetailRequest'
        required: true
      responses:
        "200":
          description: successful update
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvoiceItemDetailDto'
        "400":
          description: request parameters are invalid
        "404":
          description: invoiceItemDetail not found
    delete:
      tags:
      - Invoice Item Detail
      operationId: delete invoice item detail
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful deletion
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvoiceItemDetailDto'
        "400":
          description: invoice item detail is used
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ApiError'
        "403":
          description: invoice is posted
        "404":
          description: invoice item detail not found
    patch:
      tags:
      - Invoice Item Detail
      operationId: patch invoice item detail
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoiceItemDetailRequest'
        required: true
      responses:
        "200":
          description: successful update
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvoiceItemDetailDto'
        "400":
          description: request parameters are invalid
        "404":
          description: invoice item detail not found
  /contacts/{id}:
    get:
      tags:
      - Contact
      operationId: get contact
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ContactDto'
        "404":
          description: contact not found
    put:
      tags:
      - Contact
      operationId: update contact
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactRequest'
        required: true
      responses:
        "200":
          description: successful
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ContactDto'
        "400":
          description: request parameters are invalid
        "404":
          description: contact not found
    delete:
      tags:
      - Contact
      operationId: delete contact
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ContactDto'
        "400":
          description: contact is used
        "404":
          description: contact not found
    patch:
      tags:
      - Contact
      operationId: patch contact
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactRequest'
        required: true
      responses:
        "200":
          description: successful
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ContactDto'
        "400":
          description: request parameters are invalid
        "404":
          description: contact not found
  /warehouses:
    get:
      tags:
      - Warehouse
      operationId: get warehouses
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 25
      - name: query
        in: query
        required: false
        schema:
          type: string
          default: ""
      responses:
        "200":
          description: successful
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageWarehouseDto'
    post:
      tags:
      - Warehouse
      operationId: create warehouse
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WarehouseRequest'
        required: true
      responses:
        "201":
          description: successful creation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WarehouseDto'
        "400":
          description: request parameters are invalid
  /warehouses/{id}/details:
    get:
      tags:
      - Warehouse
      operationId: get warehouse details
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 25
      - name: query
        in: query
        required: false
        schema:
          type: string
          default: ""
      responses:
        "200":
          description: successful
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageWarehouseItemDetailDto'
        "404":
          description: warehouse not found
    post:
      tags:
      - Warehouse
      operationId: create warehouse detail
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WarehouseItemDetailRequest'
        required: true
      responses:
        "201":
          description: successful creation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WarehouseItemDetailDto'
        "400":
          description: request parameters are invalid
        "404":
          description: itemId Item not found
  /units:
    get:
      tags:
      - Unit
      operationId: get units
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 25
      - name: query
        in: query
        required: false
        schema:
          type: string
          default: ""
      responses:
        "200":
          description: successful
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageUnitDto'
    post:
      tags:
      - Unit
      operationId: create unit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnitRequest'
        required: true
      responses:
        "201":
          description: successful creation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UnitDto'
        "400":
          description: request parameters are invalid
        "404":
          description: belongsToId unit not found
  /items:
    get:
      tags:
      - Item
      operationId: get items
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 25
      - name: query
        in: query
        required: false
        schema:
          type: string
          default: ""
      responses:
        "200":
          description: successful
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageItemDto'
    post:
      tags:
      - Item
      operationId: create item
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemRequest'
        required: true
      responses:
        "201":
          description: successful creation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ItemDto'
        "400":
          description: request parameters are invalid
        "404":
          description: baseUnitId unit not found
  /invoices:
    get:
      tags:
      - Invoice
      operationId: get invoices
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 25
      - name: query
        in: query
        required: false
        schema:
          type: string
          default: ""
      responses:
        "200":
          description: successful
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageInvoiceDto'
    post:
      tags:
      - Invoice
      operationId: create invoice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoiceRequest'
        required: true
      responses:
        "201":
          description: successful creation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvoiceDto'
        "400":
          description: request parameters are invalid
        "404":
          description: warehouseId Warehouse not found
  /invoices/{id}/details:
    get:
      tags:
      - Invoice
      operationId: get invoice details
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 25
      - name: query
        in: query
        required: false
        schema:
          type: string
          default: ""
      responses:
        "200":
          description: successful
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageInvoiceItemDetailDto'
        "404":
          description: invoice not found
    post:
      tags:
      - Invoice
      operationId: create invoice detail
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoiceItemDetailRequest'
        required: true
      responses:
        "201":
          description: successful creation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/InvoiceItemDetailDto'
        "400":
          description: request parameters are invalid
        "404":
          description: unitId Unit not found
  /contacts:
    get:
      tags:
      - Contact
      operationId: get contacts
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 25
      - name: query
        in: query
        required: false
        schema:
          type: string
          default: ""
      - name: group
        in: query
        required: false
        schema:
          type: string
          default: all
      responses:
        "200":
          description: successful
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageContactDto'
        "400":
          description: group query parameter is invalid
    post:
      tags:
      - Contact
      operationId: create contact
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactRequest'
        required: true
      responses:
        "201":
          description: successful creation
        "400":
          description: request parameters are invalid
components:
  schemas:
    WarehouseRequest:
      required:
      - allowNegativeStock
      - name
      type: object
      properties:
        name:
          type: string
        allowNegativeStock:
          type: boolean
    WarehouseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        createdOn:
          type: string
          format: date-time
        updatedOn:
          type: string
          format: date-time
        name:
          type: string
        allowNegativeStock:
          type: boolean
    ApiError:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        error:
          type: string
        message:
          type: string
        status:
          type: integer
          format: int32
        isSevere:
          type: boolean
    WarehouseItemDetailRequest:
      required:
      - itemId
      - quantity
      type: object
      properties:
        itemId:
          type: integer
          format: int64
        quantity:
          type: number
          format: double
    ItemDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        createdOn:
          type: string
          format: date-time
        updatedOn:
          type: string
          format: date-time
        name:
          type: string
        basePrice:
          type: number
          format: double
        baseUnit:
          $ref: '#/components/schemas/UnitDto'
    UnitDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        createdOn:
          type: string
          format: date-time
        updatedOn:
          type: string
          format: date-time
        name:
          type: string
        factor:
          type: number
          format: double
        belongsToId:
          type: integer
          format: int64
    WarehouseItemDetailDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        createdOn:
          type: string
          format: date-time
        updatedOn:
          type: string
          format: date-time
        item:
          $ref: '#/components/schemas/ItemDto'
        quantity:
          type: number
          format: double
    UnitRequest:
      required:
      - factor
      - name
      type: object
      properties:
        name:
          type: string
        factor:
          type: number
          format: double
        belongsToId:
          type: integer
          format: int64
    ItemRequest:
      required:
      - basePrice
      - baseUnitId
      - name
      type: object
      properties:
        name:
          type: string
        baseUnitId:
          type: integer
          format: int64
        basePrice:
          type: number
          format: double
    InvoiceRequest:
      required:
      - customerId
      - salesmanId
      - warehouseId
      type: object
      properties:
        customerId:
          type: integer
          format: int64
        salesmanId:
          type: integer
          format: int64
        warehouseId:
          type: integer
          format: int64
    ContactDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        createdOn:
          type: string
          format: date-time
        updatedOn:
          type: string
          format: date-time
        name:
          type: string
        type:
          type: string
          enum:
          - EMPLOYEE
          - CUSTOMER
    InvoiceDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        createdOn:
          type: string
          format: date-time
        updatedOn:
          type: string
          format: date-time
        customer:
          $ref: '#/components/schemas/ContactDto'
        salesman:
          $ref: '#/components/schemas/ContactDto'
        warehouse:
          $ref: '#/components/schemas/WarehouseDto'
        status:
          type: string
          enum:
          - PENDING
          - POSTED
          - CANCELED
        total:
          type: number
          format: double
    InvoiceItemDetailRequest:
      required:
      - itemId
      - quantity
      - unitId
      type: object
      properties:
        itemId:
          type: integer
          format: int64
        unitId:
          type: integer
          format: int64
        quantity:
          type: number
          format: double
        unitPrice:
          type: number
          format: double
    InvoiceItemDetailDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        createdOn:
          type: string
          format: date-time
        updatedOn:
          type: string
          format: date-time
        item:
          $ref: '#/components/schemas/ItemDto'
        unit:
          $ref: '#/components/schemas/UnitDto'
        unitPrice:
          type: number
          format: double
        quantity:
          type: number
          format: double
        totalPrice:
          type: number
          format: double
    ContactRequest:
      required:
      - name
      - type
      type: object
      properties:
        name:
          type: string
        type:
          type: string
          enum:
          - EMPLOYEE
          - CUSTOMER
    PageWarehouseDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/WarehouseDto'
        number:
          type: integer
          format: int32
        sort:
          type: array
          items:
            $ref: '#/components/schemas/SortObject'
        pageable:
          $ref: '#/components/schemas/PageableObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          type: array
          items:
            $ref: '#/components/schemas/SortObject'
        pageSize:
          type: integer
          format: int32
        pageNumber:
          type: integer
          format: int32
        unpaged:
          type: boolean
        paged:
          type: boolean
    SortObject:
      type: object
      properties:
        direction:
          type: string
        nullHandling:
          type: string
        ascending:
          type: boolean
        property:
          type: string
        ignoreCase:
          type: boolean
    PageWarehouseItemDetailDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/WarehouseItemDetailDto'
        number:
          type: integer
          format: int32
        sort:
          type: array
          items:
            $ref: '#/components/schemas/SortObject'
        pageable:
          $ref: '#/components/schemas/PageableObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
    PageUnitDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/UnitDto'
        number:
          type: integer
          format: int32
        sort:
          type: array
          items:
            $ref: '#/components/schemas/SortObject'
        pageable:
          $ref: '#/components/schemas/PageableObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
    PageItemDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/ItemDto'
        number:
          type: integer
          format: int32
        sort:
          type: array
          items:
            $ref: '#/components/schemas/SortObject'
        pageable:
          $ref: '#/components/schemas/PageableObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
    PageInvoiceDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/InvoiceDto'
        number:
          type: integer
          format: int32
        sort:
          type: array
          items:
            $ref: '#/components/schemas/SortObject'
        pageable:
          $ref: '#/components/schemas/PageableObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
    PageInvoiceItemDetailDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/InvoiceItemDetailDto'
        number:
          type: integer
          format: int32
        sort:
          type: array
          items:
            $ref: '#/components/schemas/SortObject'
        pageable:
          $ref: '#/components/schemas/PageableObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
    PageContactDto:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/ContactDto'
        number:
          type: integer
          format: int32
        sort:
          type: array
          items:
            $ref: '#/components/schemas/SortObject'
        pageable:
          $ref: '#/components/schemas/PageableObject'
        numberOfElements:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        empty:
          type: boolean
